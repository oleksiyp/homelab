plugins {
    id 'base'
}

ext {
    imageRepository = "${docker_repository_base}/${rootProject.name}/${project.name}"
}

apply from: "$rootDir/gradle/react-project.gradle"
apply from: "$rootDir/gradle/chart.gradle"
apply from: "$rootDir/gradle/image.gradle"

dependencies {
    nodeDependency project(path: ":api", configuration: 'nodeModule')
}

chartInstall.dependsOn(dockerPublish)

task preparePackage(type: Copy) {
    dependsOn(build)
    group = "deployment"
    from('.') {
        include 'src/**'
        include 'public/**'
        include 'Dockerfile'
        include 'package.json'
        include 'package-lock.json'
        include 'tsconfig*'
        include 'eslint.config.js'
        include 'nginx.conf'
        include 'vite.config.ts'
        include 'index.html'
    }
    into layout.buildDirectory.file("image")
    eachFile {
        if (it.name == 'vite.config.ts') {
            filter { line ->
                line.replace("base: '/'", "base: '@ASSET_LOCATION@'")
            }
        }
    }
}

task npmInstallDependenciesProject() {
    dependsOn configurations.nodeDependency

    doLast {
        configurations.nodeDependency.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            exec {
                commandLine "npm", "install", "--save", projectDir.relativePath(artifact.file)
            }
        }
    }
}


task npmInstallDependenciesBuild() {
    dependsOn(preparePackage)
    dependsOn configurations.nodeDependency

    doLast {
        configurations.nodeDependency.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from artifact.file
                into layout.buildDirectory.file("image/dependencies/${artifact.name}")
                exclude 'node_modules/**'
            }
            exec {
                workingDir layout.buildDirectory.file("image")
                commandLine "npm", "install", "--save", "./dependencies/${artifact.name}"
            }
        }
    }
}

build.dependsOn(npmInstallDependenciesProject)

task dockerPrepare(type: Copy) {
    dependsOn(npmInstallDependenciesBuild)
}

