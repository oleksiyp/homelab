
plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

ext {
    imageRepository = "${docker_repository_base}/${rootProject.name}/${project.name}"
}

apply from: "$rootDir/gradle/chart.gradle"
apply from: "$rootDir/gradle/image.gradle"
apply from: "$rootDir/gradle/jooq-codegen.gradle"

task dockerPrepare(type: Copy) {
    dependsOn(build)
    group = "deployment"
    from 'Dockerfile'
    into layout.buildDirectory.file("image")
    from (bootJar.archiveFile.get().asFile) {
        rename '.*', 'application.jar'
    }
}

chartInstall.dependsOn(dockerPublish)

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq:3.19.8'
    implementation 'org.jooq:jooq-meta:3.19.8'
    implementation 'org.jooq:jooq-codegen:3.19.8'

    implementation 'org.liquibase:liquibase-core:4.27.0'

    implementation 'org.postgresql:postgresql:42.7.3'

    implementation project(":api")

    implementation 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filesMatching('banner.txt') {
        filter ReplaceTokens, tokens: ['project': rootProject.name, 'module': project.name, 'version': project.version]
    }
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated-sources/jooq")
        }
    }
}

compileJava.dependsOn(jooqCodeGen)
