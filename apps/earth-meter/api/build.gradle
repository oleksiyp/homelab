import org.apache.tools.ant.filters.ReplaceTokens
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java-library'
    id 'org.openapi.generator'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

def ancestorNames(Project project) {
    return (project != null ? ancestorNames(project.parent) + [project.name]: [])
}

ext {
    packageName = ancestorNames(project).join("-")
    packageDir = layout.buildDirectory.dir("package/$packageName").get().asFile.toString()
    javaPackage = "codegen.openapi.${rootProject.name.replace("-", "_")}.${project.name.replace("-", "_")}"
}

configurations {
    nodeModule {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springdoc:springdoc-openapi-ui:1.8.0"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}


task generateTypescriptApiClient(type: GenerateTask) {
    generatorName = "typescript-fetch"
    inputSpec = "$projectDir/spec.yaml"
    outputDir.set(layout.buildDirectory.file("typescript-client/main").get().asFile.toString())
    apiPackage = javaPackage
    modelPackage = javaPackage
}


task generateJavaServer(type: GenerateTask) {
    generatorName = "spring"
    inputSpec = "$projectDir/spec.yaml"
    outputDir.set(layout.buildDirectory.file("java-server").get().asFile.toString())
    apiPackage = javaPackage
    modelPackage = javaPackage
    configOptions = [
            library         : "spring-boot",
            dateLibrary     : "java8",
            interfaceOnly   : "true",
            useSpringBoot3  : "true"
    ]
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/java-server/src/main/java")
        }
    }
}

tasks.compileJava {
    dependsOn(generateJavaServer)
}

task createNpmProjectDir(type: Exec) {
    group = "npm"
    workingDir layout.buildDirectory.dir("package").get()
    outputs.dir(layout.buildDirectory.dir("package/$packageName").get())
    commandLine "mkdir", "-p", packageName
}

task copyProjectFiles(type: Copy) {
    group = "npm"
    dependsOn(createNpmProjectDir)
    inputs.property("name", packageName)
    inputs.property("version", version)
    from (layout.projectDirectory.asFile) {
        include 'package.json'
        include 'tsconfig.json'
    }
    into packageDir
    filter(ReplaceTokens, tokens: [NAME: packageName, VERSION: version.toString()])
}

task copySources(type: Copy) {
    group = "npm"
    dependsOn(createNpmProjectDir)
    dependsOn(generateTypescriptApiClient)
    inputs.property("version", project.version)
    from layout.buildDirectory.file("typescript-client/main")
    into "${packageDir}/src"
}

task npmInstallTypescript(type: Exec) {
    group = "npm"
    dependsOn(copyProjectFiles)
    dependsOn(copySources)
    workingDir packageDir
    commandLine "npm", "install", "--save-dev", "typescript", "ts-node", "@types/node"
}

task npmBuild(type: Exec) {
    dependsOn(npmInstallTypescript)
    group = "npm"
    workingDir packageDir
    commandLine "npm", "run", "build"
}

tasks.build {
    dependsOn(npmBuild)
}

artifacts {
    nodeModule(new File(packageDir)) {
        builtBy(npmBuild)
    }
}


bootJar.enabled = false