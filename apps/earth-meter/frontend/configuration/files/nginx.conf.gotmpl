pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;

    client_body_temp_path /tmp/client_body_temp;
    proxy_temp_path /tmp/proxy_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    scgi_temp_path /tmp/scgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;

    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

    log_format json_combined escape=json '{"time": "$time_iso8601", "remote_addr": "$remote_addr", "remote_user": "$remote_user", "request": "$request", "status": "$status", "body_bytes_sent": "$body_bytes_sent", "request_time": "$request_time", "http_referer": "$http_referer", "http_user_agent": "$http_user_agent", "http_x_forwarded_for": "$http_x_forwarded_for"}';

    access_log /dev/stdout json_combined;

    # Set error log to stdout as well (optional)
    error_log /dev/stderr warn;
    server {
{{- if .Values.tls.enabled }}
        listen {{ .Values.port }} ssl;

        ssl_certificate /app/config/tls/{{ .Values.tls.keystore.certificateKey }};
        ssl_certificate_key /app/config/tls/{{ .Values.tls.keystore.privateKeyKey }};

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;  # Disable session tickets for forward secrecy

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Referrer-Policy no-referrer-when-downgrade;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self' 'unsafe-inline';";
{{- else }}
        listen {{ .Values.port }};
{{- end }}
        server_name localhost;

        location {{ .Values.ingress.path }} {
            alias /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            sub_filter '/@ASSET_LOCATION@' '{{ .Values.ingress.path }}';
            sub_filter_once off;
            sub_filter_types *;
        }

        location /health {
            return 200 'Healthy';
            add_header Content-Type text/plain;
        }
   }
}